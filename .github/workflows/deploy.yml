name: Deploy to DigitalOcean

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      ref:
        description: "Git ref (branch/tag) to deploy"
        required: false
        default: "main"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.ref || 'main' }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.15.0+sha512.486ebc259d3e999a4e8691ce03b5cac4a71cbeca39372a9b762cb500cfdf0873e2cb16abe3d951b1ee2cf012503f027b98b6584e4df22524e0c7450d9ec7aa7b

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build (standalone)
        env:
          MONGODB_URI: mongodb://127.0.0.1:27017/dummy
          NEXTAUTH_SECRET: dummy-secret
          NEXTAUTH_URL: https://example.com
        run: pnpm build

      - name: Package artifact
        run: |
          tar -czf release.tgz \
            .next/standalone \
            .next/static \
            public \
            next.config.js \
            package.json \
            env.example

      - name: Upload to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.SSH_PORT || 22 }}
          source: "release.tgz"
          target: "~/apps/openshutter"
          timeout: 120s
          command_timeout: 120s

      - name: Deploy on server
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.SSH_PORT || 22 }}
          envs: DEPLOY_DIR
          env: |
            DEPLOY_DIR=${{ secrets.DEPLOY_DIR }}
          script: |
            set -e
            echo "SSH connection successful! Testing deployment..."
            echo "Deployment test - $(date)" > /tmp/openshutter-deploy-test.txt
            echo "Test file created at /tmp/openshutter-deploy-test.txt"
            
            # Define directories
            SRC_DIR="$HOME/apps/openshutter"
            APP_DIR="${DEPLOY_DIR:-$SRC_DIR}"
            
            echo "DEBUG: SRC_DIR=$SRC_DIR"
            echo "DEBUG: APP_DIR=$APP_DIR"
            echo "DEBUG: DEPLOY_DIR=$DEPLOY_DIR"
            
            # Ensure source directory exists and extract there first
            mkdir -p "$SRC_DIR"
            cd "$SRC_DIR"
            echo "Extracting release.tgz in $SRC_DIR..."
            tar -xzf release.tgz
            echo "Extraction completed. Contents:"
            ls -la
            rm -f release.tgz
            
            # Always sync files to target (whether same or different)
            echo "Syncing files from $SRC_DIR to $APP_DIR..."
            sudo mkdir -p "$APP_DIR"
            sudo rsync -a --delete "$SRC_DIR"/ "$APP_DIR"/
            echo "Sync completed. Target contents:"
            ls -la "$APP_DIR"
            
            # Install production dependencies for standalone build
            echo "Installing production dependencies with pnpm..."
            cd "$APP_DIR"
            # Install pnpm if not available
            if ! command -v pnpm &> /dev/null; then
              echo "Installing pnpm..."
              sudo npm install -g pnpm
            fi
            sudo pnpm install --production --frozen-lockfile
            echo "Dependencies installed. Node modules:"
            ls -la node_modules/ | head -10
            
            # Ensure static files are in the correct location for Next.js standalone
            echo "Setting up static files for Next.js standalone..."
            if [ -d "$APP_DIR/.next/static" ]; then
              echo "Static files found at $APP_DIR/.next/static"
              ls -la "$APP_DIR/.next/static" | head -10
            else
              echo "WARNING: Static files not found at $APP_DIR/.next/static"
            fi

            # Create runtime env file if not exists
            if [ ! -f "$APP_DIR/.env" ]; then
              echo "Create .env on server based on required keys" >&2
              sudo touch "$APP_DIR/.env"
              sudo chown "$USER":"$USER" "$APP_DIR/.env"
            fi

            # Install Watt3 if not already installed
            if ! command -v watt3 &> /dev/null; then
              echo "Installing Watt3..."
              curl -fsSL https://watt3.dev/install.sh | sudo bash
            fi

            # Create Watt3 configuration file
            WATT3_CONFIG="$APP_DIR/watt3.toml"
            echo "Creating Watt3 config at $WATT3_CONFIG..."
            {
              echo "[processes.openshutter]"
              echo "command = \"node .next/standalone/server.js\""
              echo "cwd = \"$APP_DIR\""
              echo "env = { NODE_ENV = \"production\", PORT = \"4000\" }"
              echo "env_file = \"$APP_DIR/.env\""
              echo "restart = \"always\""
              echo "restart_delay = \"4s\""
              echo "max_restarts = 10"
              echo "min_uptime = \"10s\""
              echo "max_memory = \"1G\""
              echo ""
              echo "[processes.openshutter.logging]"
              echo "stdout = \"$APP_DIR/logs/out.log\""
              echo "stderr = \"$APP_DIR/logs/error.log\""
              echo "combined = \"$APP_DIR/logs/combined.log\""
              echo "max_size = \"10MB\""
              echo "max_files = 5"
            } > "$WATT3_CONFIG"

            # Create logs directory
            mkdir -p "$APP_DIR/logs"

            # Stop existing Watt3 process if running
            watt3 stop openshutter 2>/dev/null || true
            watt3 remove openshutter 2>/dev/null || true

            # Start the application with Watt3
            echo "Starting OpenShutter with Watt3..."
            watt3 start "$WATT3_CONFIG"
            watt3 save

            # Show Watt3 status
            watt3 status
